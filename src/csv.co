_  = require 'underscore'
_n = require 'underscore.nested'

TimeSeriesData = require './timeseries'


DASH_PATTERN       = /-/g
BLANK_LINE_PATTERN = /^(\s*)$/
COMMENT_PATTERN    = /\s*(#|\/\/).*$/
STRIP_PATTERN      = /(^\s*|\s*)$/g

class CSVData extends TimeSeriesData
    DEFAULT_OPTIONS :
        colSep              : ','
        rowSep              : '\n'
        defaultType         : 'float'
        customBars          : false
        customSep           : ';'
        errorBars           : false
        fractions           : false
        fractionSep         : '/'
        skipBlankLines      : true
        blankLinePat        : BLANK_LINE_PATTERN
        removeCommentedText : true
        commentPat          : COMMENT_PATTERN
        replaceMissing      : false
        replaceMissingValue : 0
        replaceNaN          : false
        replaceNaNValue     : 0
        padRows             : false
        padRowsValue        : 0
    
    
    (data, opts) ->
        super ...
    
    
    /* * * *  CSV Parsing  * * * */
    
    parseNumber: (s) ->
        parseFloat s
    
    validateNumber: (v) ->
        typeof v is 'number' and not isNaN v
    
    parseDate: (s) ->
        new Date s.replace DASH_PATTERN, '/'
    
    validateDate: (v) ->
        v instanceof Date and String(v) != 'Invalid Date'
    
    parseHiLo: (s) ->
        s.split @options.customBars .map @parseNumber, this
    
    parseFraction: (s) ->
        s.split @options.fractionSep .map @parseNumber, this
    
    validateArray: (v) ->
        _.isArray(v) and _.map v, @validateNumber
    
    
    
    /**
     * Parses and imports a CSV string.
     * 
     * @private
     * @returns {this}
     */
    parseData: (@rawData) ->
        return this if typeof rawData is not 'string'
        o = @options
        
        lines = rawData.split o.rowSep
        return [] unless lines.length
        first = lines[0]
        
        # Use the default delimiter or fall back to a tab if that makes sense.
        delim = o.colSep
        if first.indexOf(delim) is -1 and first.indexOf('\t') >= 0
            delim = '\t'
        
        parsers =
            *           @parseDate,         @validateDate
            *           @parseNumber,       @validateNumber
        parsers.push [  @parseHiLo,         @validateArray ] if o.customBars
        parsers.push [  @parseFraction,     @validateArray ] if o.fractions
        parser = @createParser parsers, this
        
        @columns = []
        rows = @rows = []
        hasHeaders = @labels.length is not 0
        for line, i of lines
            line .= replace o.commentPat, '' if o.removeCommentedText
            continue if o.skipBlankLines and (line.length is 0 or o.blankLinePat.test line)
            
            cols = line.split delim
            unless hasHeaders
                hasHeaders = true
                @labels = cols.map -> it.replace STRIP_PATTERN, ''
                continue
            
            date = parser cols.shift()
            fields = cols.map parser
            if o.errorBars
                fields = fields.reduce do
                    (acc, v) ->
                        last = acc[acc.length-1]
                        unless last and last.length < 2
                            acc.push last = []
                        last.push v
                        acc
                    []
            
            fields.unshift date
            rows.push fields
            fields.forEach (v, idx) ~>
                @columns.push [] unless @columns[idx]
                @columns[idx].push v
        
        @untransformedRows = _n.merge [], @rows
        this
    

module.exports = exports = CSVData
